#include "handler.h"

// Returns a random number between min and max
int choose(int min, int max) { return rand() % (max - min + 1) + min; }

// Returns the direction of the flow
int direction(int line, int dir) { return dir ? line % 2 : (line + 1) % 2; }

// Checks if the item is finished in its journey.
int out_of_bounds(Item* item) {
    switch (item->direction) {
        case RIGHT: return item->column >= GAME_WIDTH; break;
        case LEFT:  return item->column + CROCODILE_DIM <= 0; break;
        default:    return 0;
    }
}

// Returns the pointer to the crocodile in the Flow with the same id as the given item.
Item* get_crocodile(Flow* flow, Item* item) {
    for (unsigned int i = 0; i < flow->how_many_crocodiles; i++) {
        if (flow->crocodiles[i].id == item->id) { return &flow->crocodiles[i]; }
    }
    return NULL;
}

// Updates the crocodile in the Flow with the same id as the given item.
void update_crocodile(Flow* flow, Item* item) {
    Item* crocodile = get_crocodile(flow, item);
    if (crocodile != NULL) { *crocodile = *item; }
}

// Returns a new array of flows.
Flow* new_flows() {
    Flow* flows = (Flow*)malloc(sizeof(Flow) * NUM_FLOWS);
    int draw = choose(LEFT, RIGHT); 
    for (int i = 0; i < NUM_FLOWS; i++) {
        Item* crocodiles = (Item*)calloc(CROCODILE_MAX_NUM, sizeof(Item));
        Flow flow = (Flow){
            .line = i,
            .direction = direction(i, draw),
            .speed = MIN_SPEED + rand() % (MIN_SPEED - MAX_SPEED + 1),
            .how_many_crocodiles = 0,
            .last_crocodile_index = 4,
            .crocodiles = crocodiles
        };
        flows[i] = flow;
    }
    return flows;
}

Item new_frog() {
    Item frog = (Item){
        .line = DEN_HEIGHT + NUM_FLOWS,
        .column = GAME_WIDTH / 2,
        .type = FROG,
        .dimension = FROG_DIM,
        .speed = 0,
        .direction = 0,
        .id = 0
    };
    return frog;
}

void new_crocodile(Buffer* buffer, Flow* flow) {
    if (flow->how_many_crocodiles < CROCODILE_MAX_NUM) {
        int start_column = (flow->direction == RIGHT) ? CROC_LEFT_START + CROCODILE_DIM : CROC_RIGHT_START - CROCODILE_DIM;
        
        // Check if the starting position is free
        for (unsigned int i = 0; i < flow->how_many_crocodiles; i++) {
            if (flow->crocodiles[i].column < start_column && flow->crocodiles[i].id != 0) {
                return; // Position is occupied, do not create a new crocodile
            }
        }

        Item new_crocodile = (Item){
            .line = flow->line + DEN_HEIGHT,
            .column = start_column,
            .type = CROCODILE,
            .dimension = CROCODILE_DIM,
            .speed = flow->speed,
            .direction = flow->direction,
            .id = 0
        };
        newTask(buffer, &crocodile, &new_crocodile);
        flow->how_many_crocodiles++;
        flow->last_crocodile_index = (flow->last_crocodile_index + 1) % CROCODILE_MAX_NUM;
        flow->crocodiles[flow->last_crocodile_index] = new_crocodile;
    }
}

void new_crocodiles(Buffer* buffer, Game* game) {
    for (int i = 0; i < NUM_FLOWS; i++) {
        new_crocodile(buffer, &game->flows[i]);
    }
}

// Returns a new Game.
Game new_game() {
    Game game = (Game){
        .flows = new_flows(),
        .frog = new_frog(),
    };
    return game;
}

void end_game(Buffer *buffer, Game *game) {
    for (int i = 0; i < NUM_FLOWS; i++) {
        for (int j = 0; j < CROCODILE_MAX_NUM; j++) {
            if (game->flows[i].crocodiles[j].id != 0) {
                killTask(buffer, &game->flows[i].crocodiles[j]);
            }
        }
        free(game->flows[i].crocodiles);
    }
    free(game->flows);
}

void manche(WINDOW* win) {
    srand(time(NULL)); 
    Buffer buffer = newBuffer();
    Game game = new_game();
    newTask(&buffer, &frog, &game.frog);

    while(1) {
        Item receveid;
        readItem(&buffer, &receveid, MAIN_PIPE);

        new_crocodiles(&buffer, &game);

        switch (receveid.type) {
            case FROG: {
                displayItem(win, &game.frog, &receveid);
                game.frog = receveid;
            } break;
            case CROCODILE: {
                Flow* flow = &game.flows[receveid.line - DEN_HEIGHT];
                displayItem(win, get_crocodile(&game.flows[receveid.line - DEN_HEIGHT], &receveid), &receveid);
                update_crocodile(flow, &receveid);
                if (out_of_bounds(&receveid)) { 
                    killTask(&buffer, &receveid);
                    flow->how_many_crocodiles--; 
                }
            } break;                
            case BULLET:
                // TODO
                break;
            case GRANADE:
                // TODO
                break;
            case EXIT:
                break;
        }

        if (receveid.type == EXIT) { break; }
        mvwprintw(win, 0, 0, "num %d / index %d / col %d    ", game.flows[0].how_many_crocodiles, game.flows[0].last_crocodile_index, game.flows[0].crocodiles[game.flows[0].last_crocodile_index].column);
        wrefresh(win);
    }

    end_game(&buffer, &game);
    killTask(&buffer, &game.frog);
}